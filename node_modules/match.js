function match (studentARaw, studentBRaw, numSimpleQuestions, complicatedQuestions){

	var studentA = studentARaw.questions;
	var studentB = studentBRaw.questions;

	function Questions (studentA, studentB){
	  var percentagAB = 0, a1 = 0, a2 = 0; 
	  var totalAB = 0; 
	  
	  for (var i = 0; i < numSimpleQuestions; i++){
	      var question1 = studentA.simpleQuestions[i];
	      var question2 = studentB.simpleQuestions[i];
	      percentagAB += simpleQuestions (question1, question2); 
	  }
	 // console.log(percentagAB); 
	  a1 = (percentagAB / numSimpleQuestions)*0.7*100; 
	  a2 = deepQuestions (studentA.specialQuestions, studentB.specialQuestions)*0.3*100; 
	  totalAB =  a1+a2; 
	  //console.log( "total Percentages: "+ totalAB + " " + a1 + " " + a2);

	  var studentMatchB = {
	  	percentage: totalAB, 
	  	studentId: studentBRaw._id,
	  	firstName: studentBRaw.name.first,
	  	lastName:  studentBRaw.name.last,
	  	grade: studentBRaw.grade
	  };

	  var studentMatchA = {
	  	percentage: totalAB,
	  	studentId: studentARaw._id,
	  	firstName: studentARaw.name.first,
	  	lastName:  studentARaw.name.last,
	  	grade: studentARaw.grade
	  };
	  
	  return sortingValidation(studentMatchA, studentMatchB); 

	}//end question

	function sortingValidation (studentMatchA, studentMatchB){
	  	return sortingValidationIntermediate (studentARaw, studentMatchA, studentMatchB );
	}

	function checkInList (list, studentCheck){
		for (var i =0; i< list.length; i++){
			if (list[i].studentId == studentCheck.studentId )
				return false; 
		}
		return true; 
	}	

	function sortingValidationIntermediate (studentRaw, studentMatchA, studentMatchB ) {
		 var worstGeneralMatches = studentRaw.matches.worstGeneral;
		 var worstGradeMatches = studentRaw.matches.worstGrade;  
		 var lowestScore = 0;  
		 var lowestScoreIndex = 0; 

		  // //------------- BEST GENERAL --------------------------

		  	studentRaw.matches.bestGeneral.push(studentMatchB); 
		  	studentRaw.matches.worstGeneral.push(studentMatchB); 
		  	if ( studentMatchA.grade == studentMatchB.grade ) {
		  		studentRaw.matches.bestGrade.push(studentMatchB);
		  		studentRaw.matches.worstGrade.push(studentMatchB);
		 	}
		  return studentRaw; 
	}

	function simpleQuestions (question1, question2) {
	  if ( question1 == question2){
	   return 1.0;  
	  }
	  else {
	   return 0;  
	  }
	}

	function deepQuestions (questionsA, questionsB){
	    var percentageA = 0, percentageB = 0; 
	    var bottomA = 0, bottomB = 0; 
	    var topA = 0, topB = 0; 
	    var finalPercentage = 0; 

	    for (var j = 0; j < complicatedQuestions; j++){
	      var question1 = (questionsA[j])[0];
	      var question2 = (questionsB[j])[0];
	      var value1 = (questionsA[j])[1];
	      var value2 = (questionsB[j])[1];

	      if ( question1 == question2){
	        topA +=  parseInt(value2) ; 
	        topB += parseInt(value1); 
	        //console.log( "final Percentages: "+ topA + " " + value2  );
	      }
	      bottomA += parseInt(value2);
	      bottomB += parseInt(value1);
	       
	    }

	    percentageA = topA/bottomA;
	    percentageB = topB/bottomB;
	    // console.log( "Percentages: "+ topA + " " + bottomA + " "+ topB + " " + bottomB );
	    //  console.log( "questions: "+ complicatedQuestions + " " + numSimpleQuestions + " "+ studentARaw.name.first + " " + studentBRaw.name.last );
	    
	    finalPercentage =  Math.pow(percentageA*percentageB, 1/complicatedQuestions) ;
	   // console.log( "final Percentages: "+ finalPercentage );

	    return finalPercentage; 
	}

	return Questions(studentA, studentB);

}

function cutMatch (listOfMatches){
	var tenMatches =[];
	for (var i = 0; i < 10; i++){
		if (listOfMatches[i] != null)
		tenMatches.push(listOfMatches[i]);
	}
	return tenMatches;
}


exports.match = match;
exports.cutMatch = cutMatch;

